[{"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\index.js":"1","C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\App.js":"2","C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\reportWebVitals.js":"3","C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\components\\Canvas.js":"4","C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\components\\MindmapNode.js":"5"},{"size":517,"mtime":1612774977240,"results":"6","hashOfConfig":"7"},{"size":189,"mtime":1612774977235,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1612774977241,"results":"9","hashOfConfig":"7"},{"size":1900,"mtime":1612796598090,"results":"10","hashOfConfig":"7"},{"size":4400,"mtime":1612796550726,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ou5j8u",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\index.js",[],"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\App.js",[],"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\reportWebVitals.js",[],"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\components\\Canvas.js",["23","24","25"],"C:\\Users\\Magnus\\GIT\\ReactProsjekt\\Creaza\\thomas-svg-test\\mindmapdraggable\\src\\components\\MindmapNode.js",["26","27","28"],"import { render } from '@testing-library/react';\r\nimport React, { Component, createRef, ReactDOM, useRef } from 'react'\r\nimport Draggable from 'react-draggable';\r\n\r\nclass MindmapNode extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.nodeRef = createRef();\r\n    }\r\n\r\n    state = {\r\n        buttonVisible: false,\r\n        x: \"40vw\",\r\n        y: \"40vh\",\r\n        centerX: 0,\r\n        centerY: 0,\r\n        containerDimensions: null,\r\n        parentDimensions: null\r\n    }\r\n\r\n    updateDimensions(e) {\r\n        const containerDimensions = e.target.getBoundingClientRect();\r\n        console.log(containerDimensions);\r\n        this.setState({\r\n            containerDimensions: containerDimensions\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const containerDimensions = this.nodeRef.current.getBoundingClientRect();\r\n        console.log(\"PARENT Props: \", this.props.node.parentDimensions)\r\n        this.setState({\r\n            centerX: (containerDimensions.x + containerDimensions.width / 2),\r\n            centerY: (containerDimensions.y + containerDimensions.height / 2),\r\n            containerDimensions: containerDimensions,\r\n            parentDimensions: this.props.node.parentDimensions\r\n        });\r\n        \r\n    }\r\n\r\n    render() {\r\n        console.log(\"PARENT State: \", this.state.parentDimensions);\r\n        console.log(\"THIS State: \", this.state.containerDimensions);\r\n        return (\r\n            <Draggable cancel=\"h2\" onStop={this.updateDimensions.bind(this)}>\r\n                <g >\r\n                    <line \r\n                    x1={this.state.centerX} \r\n                    y1={this.state.centerY} \r\n                    x2={this.state.parentDimensions ? (this.state.parentDimensions.x + this.state.parentDimensions.width * 5) : \"500\"} \r\n                    y2={this.state.parentDimensions ? (this.state.parentDimensions.y + this.state.parentDimensions.height * 2) : \"200\"} strokeWidth=\"2\" stroke=\"black\"/>\r\n\r\n                    <foreignObject x={this.state.x} y={this.state.y} \r\n                    width={this.props.node.nodeWidth + this.props.node.strokeWidth*2} // Default width plus room for border \r\n                    height={this.props.node.nodeHeight + this.props.node.strokeWidth*2} // Default height plus room for border \r\n                    >\r\n                        <div ref={this.nodeRef} onMouseEnter={e => this.setState({buttonVisible: true})} onMouseLeave={e => setTimeout(() => {this.setState({buttonVisible: false})}, 200) }>\r\n                            <button \r\n                                style={{\r\n                                    visibility: this.state.buttonVisible ? \"visible\" : \"hidden\",\r\n                                    backgroundColor: this.props.node.strokeColor,\r\n                                    border: \"none\",\r\n                                    color: \"white\"\r\n                                }} \r\n                                className=\"createNodeBtn\" \r\n                                onClick={this.props.createNewNode.bind(this, this.state.containerDimensions)}>+</button>\r\n                    \r\n                            <div\r\n                                onClick={this.props.handleSelected.bind(this, this.props.node.id)}\r\n                                className=\"mindMapNode\"\r\n                                style={this.props.node.isSelected ? {\r\n                                    boxShadow: \"0 0 5px blue\",\r\n                                    backgroundColor: this.props.node.fill,\r\n                                    borderColor: this.props.node.strokeColor,\r\n                                } : {\r\n                                        backgroundColor: this.props.node.fill,\r\n                                        borderStyle: \"solid\",\r\n                                        borderColor: this.props.node.strokeColor,\r\n                                        borderWidth: this.props.node.strokeWidth\r\n                                    }\r\n                                }\r\n                            >\r\n                                <h2 onClick={e => console.log(\"get text value\")} contentEditable=\"true\">{this.props.node.title}</h2>\r\n                            </div>\r\n                        </div>\r\n                    </foreignObject>\r\n                </g>\r\n            </Draggable>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default MindmapNode;",{"ruleId":"29","severity":1,"message":"30","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":21},{"ruleId":"29","severity":1,"message":"33","line":3,"column":10,"nodeType":"31","messageId":"32","endLine":3,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":56,"column":46,"nodeType":"36","messageId":"37","endLine":56,"endColumn":48},{"ruleId":"29","severity":1,"message":"38","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":16},{"ruleId":"29","severity":1,"message":"39","line":2,"column":39,"nodeType":"31","messageId":"32","endLine":2,"endColumn":47},{"ruleId":"29","severity":1,"message":"40","line":2,"column":49,"nodeType":"31","messageId":"32","endLine":2,"endColumn":55},"no-unused-vars","'getByTestId' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'render' is defined but never used.","'ReactDOM' is defined but never used.","'useRef' is defined but never used."]